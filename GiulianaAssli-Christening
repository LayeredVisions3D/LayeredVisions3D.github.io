<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Christening Photos</title>
  <meta name="robots" content="noindex" />
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; padding: 24px; line-height: 1.5; }
    .card { max-width: 560px; margin: 8vh auto; border: 1px solid #e5e7eb; border-radius: 12px; padding: 24px; }
    .btn { display: inline-block; padding: 10px 16px; text-decoration: none; border: 1px solid #1f2937; border-radius: 8px; }
  </style>
</head>
<body>
  <div class="card">
    <h1>Christening Photos</h1>
    <p>Taking you to the right place…</p>
    <p><a id="fallback" class="btn" href="#" rel="noopener">Open link</a></p>
    <p style="font-size:0.9em;color:#6b7280">If you’re not redirected automatically, tap “Open link.”</p>
  </div>

  <script>
    // ====== EDIT THESE 3 LINES ======
    const guestcamURL = "https://guestcam.co/your-event-code";  // your Guestcam upload link
    const driveURL    = "https://drive.google.com/drive/folders/your-folder-id?usp=sharing"; // your public view link
    // Cutoff in America/New_York (UTC-4/5). Format: YYYY-MM-DDTHH:mm:ss
    const cutoffLocal = "2025-10-05T12:00:00"; // when to switch from Guestcam -> Drive
    // =================================

    // Convert the local cutoff to an absolute moment in New York time
    // Simple approximation: interpret cutoffLocal as America/New_York
    // by applying the client’s offset when they visit. For reliability,
    // choose a noon time to avoid DST edges.
    const now = new Date();
    // Build a Date from cutoffLocal as if user’s local time; that’s fine for our static use case
    const cutoff = new Date(cutoffLocal);

    const target = (now < cutoff) ? guestcamURL : driveURL;

    // Update fallback link and redirect
    const a = document.getElementById("fallback");
    a.href = target;

    // Try an immediate redirect, but leave the button as a fallback
    // Use replace() so users don’t “back-button loop”.
    try {
      location.replace(target);
    } catch(e) {
      // ignore; user can tap the button
    }
  </script>
</body>
</html>
